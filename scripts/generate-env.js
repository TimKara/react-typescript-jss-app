#!/usr/bin/env node
"use strict";

const packageConfig = require('../package.json');

/* eslint-disable no-console */

/**
 * Generate .env.connected, .env.disconnected files.
 * The files generated by this function will be picked up by create react app build and custom builds.
 * This is executed prior to the build running, so it's a way to inject environment or build config-specific
 * settings as variables into the JSS app.
 * NOTE! Any configs returned here will be written into the client-side JS bundle. DO NOT PUT SECRETS HERE.
 * @param {object} configOverrides Keys in this object will override any equivalent global config keys.
 */
module.exports = function envGenerator(configOverrides, disconnected) {
  const defaultConfig = {
    sitecoreApiKey: 'no-api-key-set',
    sitecoreApiHost: '',
    jssAppName: 'Unknown',
  };

  // require + combine config sources
  const scjssConfig = transformScJssConfig();
  const packageJson = transformPackageConfig();

  // optional:
  // do any other dynamic config source (e.g. environment-specific config files)
  // Object.assign merges the objects in order, so the
  // package.json config can override the calculated config,
  // scjssconfig.json overrides it,
  // and finally config passed in the configOverrides param wins.
  const config = Object.assign(defaultConfig, scjssConfig, packageJson, configOverrides);

  const env = envSettings(config, disconnected);
  return env;
};

function envSettings(config, disconnected) {
  return {
    REACT_APP_NAME: config.jssAppName,
    REACT_APP_APPINSIGHTS_KEY: config.azureAppInsightsKey,
    REACT_APP_BUILDVERSION: 'DevBuild',
    REACT_APP_ENVIRONMENT: 'Development',
    REACT_APP_ENVIRONMENTCONNECTIONS: disconnected ? 'ScDisconnected' : 'ScConnected',
    REACT_APP_ADDITIONALSETTINGS: ',ignore:0',
    REACT_APP_SITECORE_JSS_APP_NAME: config.jssAppName,
    REACT_APP_SITECORE_API_KEY: config.sitecoreApiKey,
    REACT_APP_SITECORE_API_HOST: disconnected ? 'http://localhost:3042' : config.sitecoreApiHost,
    REACT_APP_SITECORE_DEFAULT_LANGUAGE: config.defaultLanguage,
    REACT_APP_SITECORE_ENABLE_DEBUG: 'true',
    REACT_APP_SITECORE_CONNECTED: disconnected? 'false' : 'true',
    REACT_APP_SITECORE_PATH_REWRITE_EXCLUDE_ROUTES: ''
  }
}

function transformScJssConfig() {
  // scjssconfig.json may not exist if you've never run setup
  // so if it doesn't we substitute a fake object
  let config;
  try {
    // eslint-disable-next-line global-require
    config = require('../scjssconfig.json');
  } catch (e) {
    return {};
  }

  if (!config) return {};

  return {
    sitecoreApiKey: config.sitecore.apiKey,
    sitecoreApiHost: config.sitecore.layoutServiceHost,
  };
}

function transformPackageConfig() {
  if (!packageConfig.config) return {};

  return {
    jssAppName: packageConfig.config.appName,
    defaultLanguage: packageConfig.config.language || 'en',
    graphQLEndpointPath: packageConfig.config.graphQLEndpointPath || null,
    azureAppInsightsKey: packageConfig.config.azureAppInsightsKey || null
  };
}
